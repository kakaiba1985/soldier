#!/bin/bash
rm -rf install*

system_update () {
sudo timedatectl set-timezone Asia/Manila
timedatectl
apt-get update -y
sudo DEBIAN_FRONTEND=noninteractive apt-get upgrade -y
sudo ufw disable
if [[ $(lsb_release -rs) == "22"* ]]; then
	systemctl restart packagekit.service udisks2.service
	sudo DEBIAN_FRONTEND=noninteractive apt install python2 -y
elif [[ $(lsb_release -rs) == "21"* ]]; then
	/etc/needrestart/restart.d/dbus.service
	systemctl restart irqbalance.service ModemManager.service multipathd.service packagekit.service polkit.service ssh.service systemd-logind.service udisks2.service unattended-upgrades.service user@0.service
	sudo DEBIAN_FRONTEND=noninteractive apt install python -y
	
elif [[ $(lsb_release -rs) == "18"* ]] || [[ $(lsb_release -rs) == "20"* ]]; then
	DEBIAN_FRONTEND=noninteractive apt-get full-upgrade -q -y -u  -o Dpkg::Options::="--force-confdef" --allow-downgrades --allow-remove-essential --allow-change-held-packages --allow-unauthenticated
	apt install python -y
else
	apt install python -y
fi

sudo DEBIAN_FRONTEND=noninteractive apt-get install netcat screen sudo mysql-client unzip build-essential curl build-essential php net-tools git lsof cmake make libwrap0-dev libpam0g-dev libdbus-1-dev libreadline-dev libnl-route-3-dev libpcl1-dev libopts25-dev autogen libgnutls28-dev libseccomp-dev libhttp-parser-dev libapache2-mod-php gcc tmux php-mysqli php-mysql php-gd php-mbstring -y
sed -i 's/Listen 80/Listen 81/g' /etc/apache2/ports.conf
service apache2 restart


}

install_stunnel() {
sudo DEBIAN_FRONTEND=noninteractive apt-get install stunnel4 -y
sed -i 's/ENABLED=0/ENABLED=1/g' /etc/default/stunnel4
/bin/cat <<"EOM" > /etc/stunnel/stunnel.pem
-----BEGIN RSA PRIVATE KEY-----
MIIEpQIBAAKCAQEAyN+jQb8vvS1jwbQSXAP9H0alRxuXuijhIp3u1gePGBsGLGg8
CWQrdhbB40W7Ov2xzg4KyiRwLgcfnOP2tHvtsN7BzC8DWrqqZsNyENDyIs3sX5oc
+JGLQZJiv2QSAP3N/4/UAAswUnGRW1TzQFXISSVeiScBsB96LoVLiPdA1e4Hhjkb
vggLOHHTcXqc1BBzIt9eg672O+yiILsOFuYPGh3TBwVZ0DvKYZocEsJ/RExOuAID
x0+THlpyO3PZhIo3EN5BVCmBcsUboByH9/Lsh+15tJqpvM8uiB9pjxlWUiRNiHjm
J5+pOWX4FpGlgrJUYSSsUUddXmPVWAj1BeQ2GwIDAQABAoIBAH7ISC5zERqBz3iu
wve4vMZEvISI8dbZfl9u9xO3aaV5SQg2Mc5rntLFwlJD7Mxq2xKG4mB7ZyJl9Jn9
d/SqU3dS4VaSRbe6IVsC+LeMaYd2GT6t8qMgmZglYJYT/xkJGD+488GjTjh63Zeb
onx0qBkisOw35mTXOTKrhuVHyXA70dD1an0fXi6tiNkIT4AVwLgqJuFxE0seePlN
Y35jZF4JvX8hOvkSshkzxNWSIs2LOOCJL7dH90FYvUYA/kvW+64O7pouA/p/VkYD
rO0fYgJmureiUZfwEVJKfnBgdhIbStA3lRxDzDmxr1BBVFaraSZ+12/jQVEXOaRb
ErovK6ECgYEA5nV12egMRn3l3MItWmcURIDtTU8cy3WreP2zTzx9RZDs3Rw2HEbR
0jyLzJOHfyFdyGrZtbUAa/LoOKT2YvPKQ2P4k4ZFbYcnl7cgAL28CrpZgNZXoEaL
sMf6Qp6PG+VUSFoFcOi/GM2c4ZypVOR5MwGbfpJ4fusekxQiTijWs4cCgYEA3yLK
Kt8bXHgg7B92mTFEKsiYrgk5SgPcYQ/HxYOMS3hrI8J3JWkMOWCCAbS1nSPPd0BY
jXGL/LSRmWA8bX/objwq8Q8YDTuuDCIPsh/SoFZsdHWc0ZlOv1BsWGijJGa21n64
Ja5r3LWSH6YLCy2PmoQzBDaCtmr/rZWXPaS4tc0CgYEAre9jJjab5SwqK6amQj/g
LR+9eobGLc0+wM+B4MC/r5yFGRCsykStIeaugJWsQ0g0lwoGDL1ydwbbO71NdDuZ
oak3OGizx8mlGT2OOuD4poQk/zdG5WG5FpCoElXHnv9D0GOZDbGsYRT2XdU2fCsA
Sn3hFPOJXAkqh0k/5wutl8sCgYEA2aXAluK6eI7AZjEmaLTSbfzuWEus8tIjQxW2
YaU30mGp9952gyoc/1ZwWSOgRp+ofQRpm8XWqu6iWn2xU4mA+Q19QVbcugOteC49
Kxy5QSYrcclK5nNoiVnz5KRkBVyfGUfPbQneMhF1b6NxgDy3pxst+/0DsNVbgUC5
niou9T0CgYEAkTXYooaf7JTAMlu/wLunkT0ZWKL/bU4ZgOFVFnF2gdfWJnHTMSu5
PtxyjisZJNbON6xW0pIjcTuUQCIpL0LoZ7qd5zi5QqISb+eKzK8ENMxgnV7MEx78
lufFKJYrjhC8j9pwY5pAR5uw2HKMS34IqLXct6NypoEYsJ48YDfA0Qw=
-----END RSA PRIVATE KEY-----
-----BEGIN CERTIFICATE-----
MIIEATCCAumgAwIBAgIJAPDuiksIWVs2MA0GCSqGSIb3DQEBCwUAMIGWMQswCQYD
VQQGEwJQSDESMBAGA1UECAwJU1RST05HVlBOMRIwEAYDVQQHDAlTVFJPTkdWUE4x
EjAQBgNVBAoMCVNUUk9OR1ZQTjESMBAGA1UECwwJU1RST05HVlBOMRIwEAYDVQQD
DAlTVFJPTkdWUE4xIzAhBgkqhkiG9w0BCQEWFHN0cm9uZy12cG5AZ21haWwuY29t
MB4XDTE4MDcwMzA1MTM0MVoXDTIxMDcwMjA1MTM0MVowgZYxCzAJBgNVBAYTAlBI
MRIwEAYDVQQIDAlTVFJPTkdWUE4xEjAQBgNVBAcMCVNUUk9OR1ZQTjESMBAGA1UE
CgwJU1RST05HVlBOMRIwEAYDVQQLDAlTVFJPTkdWUE4xEjAQBgNVBAMMCVNUUk9O
R1ZQTjEjMCEGCSqGSIb3DQEJARYUc3Ryb25nLXZwbkBnbWFpbC5jb20wggEiMA0G
CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDI36NBvy+9LWPBtBJcA/0fRqVHG5e6
KOEine7WB48YGwYsaDwJZCt2FsHjRbs6/bHODgrKJHAuBx+c4/a0e+2w3sHMLwNa
uqpmw3IQ0PIizexfmhz4kYtBkmK/ZBIA/c3/j9QACzBScZFbVPNAVchJJV6JJwGw
H3ouhUuI90DV7geGORu+CAs4cdNxepzUEHMi316DrvY77KIguw4W5g8aHdMHBVnQ
O8phmhwSwn9ETE64AgPHT5MeWnI7c9mEijcQ3kFUKYFyxRugHIf38uyH7Xm0mqm8
zy6IH2mPGVZSJE2IeOYnn6k5ZfgWkaWCslRhJKxRR11eY9VYCPUF5DYbAgMBAAGj
UDBOMB0GA1UdDgQWBBTxI2YSnxnuDpwgxKOUgglmgiH/vDAfBgNVHSMEGDAWgBTx
I2YSnxnuDpwgxKOUgglmgiH/vDAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUA
A4IBAQC30dcIPWlFfBEK/vNzG1Dx+BWkHCfd2GfmVc+VYSpmiTox13jKBOyEdQs4
xxB7HiESKkpAjQ0YC3mjE6F53NjK0VqdfzXhopg9i/pQJiaX0KTTcWIelsJNg2aM
s8GZ0nWSytcAqAV6oCnn+eOT/IqnO4ihgmaVIyhfYvRgXfPU/TuERtL9f8pAII44
jAVcy60MBZ1bCwQZcToZlfWCpO/8nLg4nnv4e3W9UeC6rDgWgpI6IXS3jikN/x3P
9JIVFcWLtsOLC+D/33jSV8XDM3qTTRv4i/M+mva6znOI89KcBjsEhX5AunSQZ4Zg
QkQTJi/td+5kVi00NXxlHYH5ztS1
-----END CERTIFICATE-----
EOM

echo 'cert=/etc/stunnel/stunnel.pem
socket = a:SO_REUSEADDR=1
socket = l:TCP_NODELAY=1
socket = r:TCP_NODELAY=1
client = no

[openvpn]
accept = 443
connect = 127.0.0.1:1194'| sudo tee /etc/stunnel/stunnel.conf
}

install_socksproxy () {
sudo DEBIAN_FRONTEND=noninteractive apt install netcat lsof php php-mysqli php-mysql php-gd php-mbstring -y
cat << \socksocserv > /usr/local/sbin/socksproxy.py
#!/usr/bin/env python3
# encoding: utf-8
# SocksProxy Mod By: Ykcir Ogotip Caayon
import socket, threading, thread, select, signal, sys, time
from os import system
system("clear")
#conexao
IP = '0.0.0.0'
try:
   PORT = int(sys.argv[1])
except:
   PORT = 8000
PASS = ''
BUFLEN = 8196 * 8
TIMEOUT = 60
MSG = 'StrongHoldVPN'
DEFAULT_HOST = '0.0.0.0:1194'
RESPONSE = "HTTP/1.1 200 " + str(MSG) + "\r\n\r\n"

class Server(threading.Thread):
    def __init__(self, host, port):
        threading.Thread.__init__(self)
        self.running = False
        self.host = host
        self.port = port
        self.threads = []
	self.threadsLock = threading.Lock()
	self.logLock = threading.Lock()

    def run(self):
        self.soc = socket.socket(socket.AF_INET)
        self.soc.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.soc.settimeout(2)
        self.soc.bind((self.host, self.port))
        self.soc.listen(0)
        self.running = True

        try:                    
            while self.running:
                try:
                    c, addr = self.soc.accept()
                    c.setblocking(1)
                except socket.timeout:
                    continue
                
                conn = ConnectionHandler(c, self, addr)
                conn.start();
                self.addConn(conn)
        finally:
            self.running = False
            self.soc.close()
            
    def printLog(self, log):
        self.logLock.acquire()
        print log
        self.logLock.release()
	
    def addConn(self, conn):
        try:
            self.threadsLock.acquire()
            if self.running:
                self.threads.append(conn)
        finally:
            self.threadsLock.release()
                    
    def removeConn(self, conn):
        try:
            self.threadsLock.acquire()
            self.threads.remove(conn)
        finally:
            self.threadsLock.release()
                
    def close(self):
        try:
            self.running = False
            self.threadsLock.acquire()
            
            threads = list(self.threads)
            for c in threads:
                c.close()
        finally:
            self.threadsLock.release()
			

class ConnectionHandler(threading.Thread):
    def __init__(self, socClient, server, addr):
        threading.Thread.__init__(self)
        self.clientClosed = False
        self.targetClosed = True
        self.client = socClient
        self.client_buffer = ''
        self.server = server
        self.log = 'Conexao: ' + str(addr)

    def close(self):
        try:
            if not self.clientClosed:
                self.client.shutdown(socket.SHUT_RDWR)
                self.client.close()
        except:
            pass
        finally:
            self.clientClosed = True
            
        try:
            if not self.targetClosed:
                self.target.shutdown(socket.SHUT_RDWR)
                self.target.close()
        except:
            pass
        finally:
            self.targetClosed = True

    def run(self):
        try:
            self.client_buffer = self.client.recv(BUFLEN)
        
            hostPort = self.findHeader(self.client_buffer, 'X-Real-Host')
            
            if hostPort == '':
                hostPort = DEFAULT_HOST

            split = self.findHeader(self.client_buffer, 'X-Split')

            if split != '':
                self.client.recv(BUFLEN)
            
            if hostPort != '':
                passwd = self.findHeader(self.client_buffer, 'X-Pass')
				
                if len(PASS) != 0 and passwd == PASS:
                    self.method_CONNECT(hostPort)
                elif len(PASS) != 0 and passwd != PASS:
                    self.client.send('HTTP/1.1 400 WrongPass!\r\n\r\n')
                if hostPort.startswith(IP):
                    self.method_CONNECT(hostPort)
                else:
                   self.client.send('HTTP/1.1 403 Forbidden!\r\n\r\n')
            else:
                print '- No X-Real-Host!'
                self.client.send('HTTP/1.1 400 NoXRealHost!\r\n\r\n')

        except Exception as e:
            self.log += ' - error: ' + e.strerror
            self.server.printLog(self.log)
	    pass
        finally:
            self.close()
            self.server.removeConn(self)

    def findHeader(self, head, header):
        aux = head.find(header + ': ')
    
        if aux == -1:
            return ''

        aux = head.find(':', aux)
        head = head[aux+2:]
        aux = head.find('\r\n')

        if aux == -1:
            return ''

        return head[:aux];

    def connect_target(self, host):
        i = host.find(':')
        if i != -1:
            port = int(host[i+1:])
            host = host[:i]
        else:
            if self.method=='CONNECT':
                port = 110
            else:
                port = 22

        (soc_family, soc_type, proto, _, address) = socket.getaddrinfo(host, port)[0]

        self.target = socket.socket(soc_family, soc_type, proto)
        self.targetClosed = False
        self.target.connect(address)

    def method_CONNECT(self, path):
    	self.log += ' - CONNECT ' + path
        self.connect_target(path)
        self.client.sendall(RESPONSE)
        self.client_buffer = ''
        self.server.printLog(self.log)
        self.doCONNECT()
                    
    def doCONNECT(self):
        socs = [self.client, self.target]
        count = 0
        error = False
        while True:
            count += 1
            (recv, _, err) = select.select(socs, [], socs, 3)
            if err:
                error = True
            if recv:
                for in_ in recv:
		    try:
                        data = in_.recv(BUFLEN)
                        if data:
			    if in_ is self.target:
				self.client.send(data)
                            else:
                                while data:
                                    byte = self.target.send(data)
                                    data = data[byte:]

                            count = 0
			else:
			    break
		    except:
                        error = True
                        break
            if count == TIMEOUT:
                error = True

            if error:
                break



def main(host=IP, port=PORT):
    print "\033[0;34mâ”"*8,"\033[1;32m PROXY SOCKS","\033[0;34mâ”"*8,"\n"
    print "\033[1;33mIP:\033[1;32m " + IP
    print "\033[1;33mPORTA:\033[1;32m " + str(PORT) + "\n"
    print "\033[0;34mâ”"*10,"\033[1;32m StrongHold","\033[0;34mâ”\033[1;37m"*11,"\n"
    server = Server(IP, PORT)
    server.start()
    while True:
        try:
            time.sleep(2)
        except KeyboardInterrupt:
            print '\nClosing...'
            server.close()
            break
if __name__ == '__main__':
    main()
socksocserv

if [[ $(lsb_release -rs) == "22"* ]]; then
	screen -dmS socksproxy python2 /usr/local/sbin/socksproxy.py 8080
	screen -dmS socksproxy python2 /usr/local/sbin/socksproxy.py 3128
	screen -dmS socksproxy python2 /usr/local/sbin/socksproxy.py 9090
	screen -dmS socksproxy python2 /usr/local/sbin/socksproxy.py 8000
	screen -dmS socksproxy python2 /usr/local/sbin/socksproxy.py 1080
else
	screen -dmS socksproxy python /usr/local/sbin/socksproxy.py 8080
	screen -dmS socksproxy python /usr/local/sbin/socksproxy.py 3128
	screen -dmS socksproxy python /usr/local/sbin/socksproxy.py 9090
	screen -dmS socksproxy python /usr/local/sbin/socksproxy.py 8000
	screen -dmS socksproxy python /usr/local/sbin/socksproxy.py 1080
fi
}

install_websocket () {
cat << \websocket > /usr/local/sbin/websocket.py
# WebSocket Mod By: Ykcir Ogotip Caayon
import socket, threading, thread, select, signal, sys, time, getopt

# Listen
LISTENING_ADDR = '0.0.0.0'
if sys.argv[1:]:
  LISTENING_PORT = sys.argv[1]
else:
  LISTENING_PORT = 80  
#Pass
PASS = ''

# CONST
BUFLEN = 4096 * 4
TIMEOUT = 60
DEFAULT_HOST = '127.0.0.1:1194'
#RESPONSE = 'HTTP/1.1 101 Switching Protocols\r\nContent-length: 1048576000000\r\n\r\n'
#RESPONSE = 'HTTP/1.1 200 Hello_World!\r\nContent-length: 0\r\n\r\nHTTP/1.1 200 Connection established\r\n\r\n'  # lint:ok
RESPONSE = 'HTTP/1.1 101 Switching Protocols \r\n\r\n'

class Server(threading.Thread):
    def __init__(self, host, port):
        threading.Thread.__init__(self)
        self.running = False
        self.host = host
        self.port = port
        self.threads = []
        self.threadsLock = threading.Lock()
        self.logLock = threading.Lock()

    def run(self):
        self.soc = socket.socket(socket.AF_INET)
        self.soc.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.soc.settimeout(2)
        intport = int(self.port)
        self.soc.bind((self.host, intport))
        self.soc.listen(0)
        self.running = True

        try:
            while self.running:
                try:
                    c, addr = self.soc.accept()
                    c.setblocking(1)
                except socket.timeout:
                    continue

                conn = ConnectionHandler(c, self, addr)
                conn.start()
                self.addConn(conn)
        finally:
            self.running = False
            self.soc.close()

    def printLog(self, log):
        self.logLock.acquire()
        print log
        self.logLock.release()

    def addConn(self, conn):
        try:
            self.threadsLock.acquire()
            if self.running:
                self.threads.append(conn)
        finally:
            self.threadsLock.release()

    def removeConn(self, conn):
        try:
            self.threadsLock.acquire()
            self.threads.remove(conn)
        finally:
            self.threadsLock.release()

    def close(self):
        try:
            self.running = False
            self.threadsLock.acquire()

            threads = list(self.threads)
            for c in threads:
                c.close()
        finally:
            self.threadsLock.release()


class ConnectionHandler(threading.Thread):
    def __init__(self, socClient, server, addr):
        threading.Thread.__init__(self)
        self.clientClosed = False
        self.targetClosed = True
        self.client = socClient
        self.client_buffer = ''
        self.server = server
        self.log = 'Connection: ' + str(addr)

    def close(self):
        try:
            if not self.clientClosed:
                self.client.shutdown(socket.SHUT_RDWR)
                self.client.close()
        except:
            pass
        finally:
            self.clientClosed = True

        try:
            if not self.targetClosed:
                self.target.shutdown(socket.SHUT_RDWR)
                self.target.close()
        except:
            pass
        finally:
            self.targetClosed = True

    def run(self):
        try:
            self.client_buffer = self.client.recv(BUFLEN)

            hostPort = self.findHeader(self.client_buffer, 'X-Real-Host')

            if hostPort == '':
                hostPort = DEFAULT_HOST

            split = self.findHeader(self.client_buffer, 'X-Split')

            if split != '':
                self.client.recv(BUFLEN)

            if hostPort != '':
                passwd = self.findHeader(self.client_buffer, 'X-Pass')
				
                if len(PASS) != 0 and passwd == PASS:
                    self.method_CONNECT(hostPort)
                elif len(PASS) != 0 and passwd != PASS:
                    self.client.send('HTTP/1.1 400 WrongPass!\r\n\r\n')
                elif hostPort.startswith('127.0.0.1') or hostPort.startswith('localhost'):
                    self.method_CONNECT(hostPort)
                else:
                    self.client.send('HTTP/1.1 403 Forbidden!\r\n\r\n')
            else:
                print '- No X-Real-Host!'
                self.client.send('HTTP/1.1 400 NoXRealHost!\r\n\r\n')

        except Exception as e:
            self.log += ' - error: ' + e.strerror
            self.server.printLog(self.log)
	    pass
        finally:
            self.close()
            self.server.removeConn(self)

    def findHeader(self, head, header):
        aux = head.find(header + ': ')

        if aux == -1:
            return ''

        aux = head.find(':', aux)
        head = head[aux+2:]
        aux = head.find('\r\n')

        if aux == -1:
            return ''

        return head[:aux];

    def connect_target(self, host):
        i = host.find(':')
        if i != -1:
            port = int(host[i+1:])
            host = host[:i]
        else:
            if self.method=='CONNECT':
                port = 110
            else:
                port = sys.argv[1]

        (soc_family, soc_type, proto, _, address) = socket.getaddrinfo(host, port)[0]

        self.target = socket.socket(soc_family, soc_type, proto)
        self.targetClosed = False
        self.target.connect(address)

    def method_CONNECT(self, path):
        self.log += ' - CONNECT ' + path

        self.connect_target(path)
        self.client.sendall(RESPONSE)
        self.client_buffer = ''

        self.server.printLog(self.log)
        self.doCONNECT()

    def doCONNECT(self):
        socs = [self.client, self.target]
        count = 0
        error = False
        while True:
            count += 1
            (recv, _, err) = select.select(socs, [], socs, 3)
            if err:
                error = True
            if recv:
                for in_ in recv:
		    try:
                        data = in_.recv(BUFLEN)
                        if data:
			    if in_ is self.target:
				self.client.send(data)
                            else:
                                while data:
                                    byte = self.target.send(data)
                                    data = data[byte:]

                            count = 0
			else:
			    break
		    except:
                        error = True
                        break
            if count == TIMEOUT:
                error = True
            if error:
                break


def print_usage():
    print 'Usage: proxy.py -p <port>'
    print '       proxy.py -b <bindAddr> -p <port>'
    print '       proxy.py -b 0.0.0.0 -p 80'

def parse_args(argv):
    global LISTENING_ADDR
    global LISTENING_PORT
    
    try:
        opts, args = getopt.getopt(argv,"hb:p:",["bind=","port="])
    except getopt.GetoptError:
        print_usage()
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print_usage()
            sys.exit()
        elif opt in ("-b", "--bind"):
            LISTENING_ADDR = arg
        elif opt in ("-p", "--port"):
            LISTENING_PORT = int(arg)


def main(host=LISTENING_ADDR, port=LISTENING_PORT):
    print "\n:-------PythonProxy-------:\n"
    print "Listening addr: " + LISTENING_ADDR
    print "Listening port: " + str(LISTENING_PORT) + "\n"
    print ":-------------------------:\n"
    server = Server(LISTENING_ADDR, LISTENING_PORT)
    server.start()
    while True:
        try:
            time.sleep(2)
        except KeyboardInterrupt:
            print 'Stopping...'
            server.close()
            break

#######    parse_args(sys.argv[1:])
if __name__ == '__main__':
    main()

websocket

if [[ $(lsb_release -rs) == "22"* ]]; then
	screen -dmS websocket python2 /usr/local/sbin/websocket.py 80
else
	screen -dmS websocket python /usr/local/sbin/websocket.py 80
fi



}

install_cron21(){
cat << \auto > /root/auto
#!/bin/bash

if nc -z localhost 8080; then
    echo "stunnel running"
else
   if [[ $(lsb_release -rs) == "22"* ]]; then
		screen -dmS socksproxy python2 /usr/local/sbin/socksproxy.py 8080
		screen -dmS socksproxy python2 /usr/local/sbin/socksproxy.py 3128
		screen -dmS socksproxy python2 /usr/local/sbin/socksproxy.py 9090
		screen -dmS socksproxy python2 /usr/local/sbin/socksproxy.py 8000
		screen -dmS socksproxy python2 /usr/local/sbin/socksproxy.py 1080
	else
		screen -dmS socksproxy python /usr/local/sbin/socksproxy.py 8080
		screen -dmS socksproxy python /usr/local/sbin/socksproxy.py 3128
		screen -dmS socksproxy python /usr/local/sbin/socksproxy.py 9090
		screen -dmS socksproxy python /usr/local/sbin/socksproxy.py 8000
		screen -dmS socksproxy python /usr/local/sbin/socksproxy.py 1080
	fi
fi

if nc -z localhost 443; then
    echo "Stunnel running"
else
    echo "ocserv not running"
    systemctl start stunnel4
fi


if nc -z localhost 1194; then
    echo "Stunnel running"
else
    echo "OpenVPN Started"
    screen -dmS openvpntcp openvpn /etc/openvpn/server/server.conf
	sudo systemctl restart --now openvpn-server@server.service
fi

if nc -z localhost 80; then
    echo "WebSocket is running"
else
	echo "WebSocket is Starting"
	if [[ $(lsb_release -rs) == "22"* ]]; then
		screen -dmS websocket python2 /usr/local/sbin/websocket.py 80
	else
		screen -dmS websocket python /usr/local/sbin/websocket.py 80
	fi
fi

sudo sync; echo 3 > /proc/sys/vm/drop_caches
swapoff -a && swapon -a
echo "Ram Cleaned!"

auto

chmod +x /root/auto
/root/auto
crontab -r
echo "SHELL=/bin/bash
@reboot sudo systemctl restart --now openvpn-server@server.service
@reboot /bin/bash /root/auto >/dev/null 2>&1
* * * * * /bin/bash /root/auto >/dev/null 2>&1" | crontab - 
}

install_cron20 () {
cat << \auto > /root/auto
#!/bin/bash

if nc -z localhost 8010; then
    echo "stunnel running"
else
    echo "Starting Port 8010"
    screen -dmS socksproxy8010 python /usr/local/sbin/socksproxy.py 8010
fi

if nc -z localhost 3128; then
    echo "stunnel running"
else
    echo "Starting Port 3128"
    screen -dmS socksproxy3128 python /usr/local/sbin/socksproxy.py 3128
fi

if nc -z localhost 8888; then
    echo "stunnel running"
else
    echo "Starting Port 8888"
    screen -dmS socksproxy8888 python /usr/local/sbin/socksproxy.py 8888
fi

if nc -z localhost 9090; then
    echo "stunnel running"
else
    echo "Starting Port 9090"
    screen -dmS socksproxy9090 python /usr/local/sbin/socksproxy.py 9090
fi

if nc -z localhost 8090; then
    echo "stunnel running"
else
    echo "Starting Port 8090"
    screen -dmS socksproxy8090 python /usr/local/sbin/socksproxy.py 8090
fi

if nc -z localhost 8080; then
    echo "stunnel running"
else
    echo "Starting Port 8080"
    screen -dmS socksproxy8080 python /usr/local/sbin/socksproxy.py 8080
fi

if nc -z localhost 443; then
    echo "ocserv running"
else
    echo "ocserv not running"
    systemctl start ocserv.service
fi

if nc -z localhost 80; then
    echo "WebSocket is running"
else
    echo "Starting WebSocket"
	screen -dmS websocket python /usr/local/sbin/websocket.py 80
fi

sudo sync; echo 3 > /proc/sys/vm/drop_caches
swapoff -a && swapon -a
echo "Ram Cleaned!"

auto

chmod +x /root/auto
/root/auto
crontab -r
echo "SHELL=/bin/bash
* * * * * /bin/bash /root/auto >/dev/null 2>&1" | crontab - 
}

install_cron () {
cat << \auto > /root/auto
#!/bin/bash

if nc -z localhost 8010; then
    echo "stunnel running"
else
    echo "Starting Port 8010"
    screen -dmS socksproxy python /usr/local/sbin/socksproxy.py 8010
fi

if nc -z localhost 443; then
    echo "ocserv running"
else
    echo "ocserv not running"
    systemctl start ocserv.service
fi

if nc -z localhost 80; then
    echo "WebSocket is running"
else
    echo "Starting WebSocket"
	screen -dmS websocket python /usr/local/sbin/websocket.py 80
fi

sudo sync; echo 3 > /proc/sys/vm/drop_caches
swapoff -a && swapon -a
echo "Ram Cleaned!"

auto

chmod +x /root/auto
/root/auto
crontab -r
echo "SHELL=/bin/bash
* * * * * /bin/bash /root/auto >/dev/null 2>&1" | crontab - 
}

install_openvpn() {

if [[ $(lsb_release -rs) == "18"* ]] || [[ $(lsb_release -rs) == "20"* ]]; then
	sudo DEBIAN_FRONTEND=noninteractive apt-get install openvpn easy-rsa -y
	mkdir -p /etc/openvpn/server/
/bin/cat <<"EOM" >/etc/systemd/resolved.conf
[Resolve]
DNS=1.1.1.1
#FallbackDNS=
#Domains=
#LLMNR=no
#MulticastDNS=no
#DNSSEC=no
#DNSOverTLS=no
#Cache=no
DNSStubListener=no
#ReadEtcHosts=yes
EOM
sudo ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf

else
	echo "DNSStubListener=no" >> /etc/systemd/resolved.conf
	sudo systemctl daemon-reload
	sudo systemctl restart systemd-resolved
	sudo DEBIAN_FRONTEND=noninteractive apt-get install openvpn openssl ca-certificates iptables easy-rsa -y
fi

echo 'port 1194
proto tcp
dev tun
ca /etc/openvpn/server/ca.crt
cert /etc/openvpn/server/server.crt
key /etc/openvpn/server/server.key
dh /etc/openvpn/server/dh.pem
topology subnet
server 10.8.0.0 255.255.250.0
push "redirect-gateway def1 bypass-dhcp"
ifconfig-pool-persist ipp.txt
push "dhcp-option DNS 8.8.8.8"
push "dhcp-option DNS 8.8.4.4"
keepalive 10 120
cipher AES-256-CBC
persist-key
persist-tun
verb 3
script-security 2
comp-lzo
status /var/www/html/tcpstatus.txt
verify-client-cert none 
username-as-common-name 
auth-user-pass-verify "/etc/openvpn/server/auth_vpn" via-file
client-connect /etc/openvpn/server/connect.sh
client-disconnect /etc/openvpn/server/disconnect.sh' > /etc/openvpn/server.conf

echo 'port 53
proto udp
dev tun
ca ca.crt
cert server.crt
key server.key
dh dh.pem
topology subnet
server 10.9.0.0 255.255.250.0
push "redirect-gateway def1 bypass-dhcp"
ifconfig-pool-persist ipp.txt
push "dhcp-option DNS 8.8.8.8"
push "dhcp-option DNS 8.8.4.4"
keepalive 10 120
cipher AES-256-CBC
persist-key
persist-tun
verb 3
comp-lzo
script-security 2
status /var/www/html/udpstatus.txt
verify-client-cert none 
username-as-common-name
auth-user-pass-verify auth_vpn via-file
tmp-dir "/etc/openvpn/" # 
client-connect /etc/openvpn/server/connect.sh
client-disconnect /etc/openvpn/server/disconnect.sh' > /etc/openvpn/server/server.conf

	
/bin/cat <<"EOM" >/etc/openvpn/server/auth_vpn
#!/bin/bash
username=`head -n1 $1 | tail -1`   
password=`head -n2 $1 | tail -1`

HOST='176.57.184.121'
USER='yt1194'
PASS='avL14m3Fl4at1IXh'
DB='vpn'

PRIVATE="username='$username' AND decrypted_password='$password' AND u_type='1' AND status='1'"

Query="SELECT username FROM vgax_users WHERE $PRIVATE"

auth_vpn=`mysql -u $USER -p$PASS -D $DB -h $HOST -sN -e "$Query"`

if [ "$auth_vpn" == "$username" ]; then
	 echo "user : $username"
	 echo "authentication ok."
	exit 0
else
	echo "authentication failed."
	exit 1
fi
EOM

cat << EOF > /etc/openvpn/server/ca.crt
-----BEGIN CERTIFICATE-----
MIIE5TCCA82gAwIBAgIJAP0GLynOqm38MA0GCSqGSIb3DQEBCwUAMIGnMQswCQYD
VQQGEwJQSDERMA8GA1UECBMIQmF0YW5nYXMxETAPBgNVBAcTCEJhdGFuZ2FzMRIw
EAYDVQQKEwlTYXZhZ2VWUE4xEjAQBgNVBAsTCVNhdmFnZVZQTjEWMBQGA1UEAxMN
c2F2YWdlLXZwbi50azEPMA0GA1UEKRMGc2VydmVyMSEwHwYJKoZIhvcNAQkBFhJz
YXZhZ2U5OUBnbWFpbC5jb20wHhcNMTgwNDIwMDQ1MTMyWhcNMjgwNDE3MDQ1MTMy
WjCBpzELMAkGA1UEBhMCUEgxETAPBgNVBAgTCEJhdGFuZ2FzMREwDwYDVQQHEwhC
YXRhbmdhczESMBAGA1UEChMJU2F2YWdlVlBOMRIwEAYDVQQLEwlTYXZhZ2VWUE4x
FjAUBgNVBAMTDXNhdmFnZS12cG4udGsxDzANBgNVBCkTBnNlcnZlcjEhMB8GCSqG
SIb3DQEJARYSc2F2YWdlOTlAZ21haWwuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOC
AQ8AMIIBCgKCAQEAwMNjUVNKJvcMBAx5k/doMtYwVhoSV2gnxA16rtZMnkckHRQc
ApvgSWOBc0e2OgL+rlb48BrheyQ9aSLiHrfGPvzpVQfpGCwSQxayEiNKdRmlb6wl
IIlnhfXyKYXx9x/fZNQWGmhczckrXl84ZYbLKglmnfXSEM0PUlfj7pujjXSsZTPV
2Pe92+sf/2ZyYotA2XXqnXIPjaPUo/kQYqmLTSY7weaYLisxn9TTJo6V0Qap2poY
FLpH7fjWCTun7jZ5CiWVIVARkZRXmurLlu+Z+TMlPK3DW9ASXA2gw8rctsoyLJym
V+6hkZiJ3k0X17SNIDibDG4vn8VFEFehOrqKXQIDAQABo4IBEDCCAQwwHQYDVR0O
BBYEFDC3ZJF7tPbQ9SUDMm6P0hxXmvNIMIHcBgNVHSMEgdQwgdGAFDC3ZJF7tPbQ
9SUDMm6P0hxXmvNIoYGtpIGqMIGnMQswCQYDVQQGEwJQSDERMA8GA1UECBMIQmF0
YW5nYXMxETAPBgNVBAcTCEJhdGFuZ2FzMRIwEAYDVQQKEwlTYXZhZ2VWUE4xEjAQ
BgNVBAsTCVNhdmFnZVZQTjEWMBQGA1UEAxMNc2F2YWdlLXZwbi50azEPMA0GA1UE
KRMGc2VydmVyMSEwHwYJKoZIhvcNAQkBFhJzYXZhZ2U5OUBnbWFpbC5jb22CCQD9
Bi8pzqpt/DAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQCdv9MOSR8O
b9wRw4qd681eTxUYEACFVZpY3eK3vJYyGtblYHIwfCPTWL6yXQxbMud4C1ISIwel
UFv/qnz/GZmAkN0qB5tNSvB48123F1AWfhhXWG+o+xWxUi+eqsXdUVZ1tpP5WQaH
EUtU6SZ1AXO6l6b/RTXymRrEInCPfbGsEnucnG7naOpBaNRXmpiMppOwzR42sd6I
QOvXkj2e8v9tQ05cffjexks+rfb/d80+1nfkv0HCLWxcdU8yOUqVryhdZLB6Rhw/
crldSHwrGWN+qptpFD160iJLIv3p5vWwUAgRoRai9iHuJMOHn4aDX0N8tbCfS+R5
qn8GWiHaXEu8
-----END CERTIFICATE-----
EOF

cat << EOF > /etc/openvpn/server/server.crt
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 1 (0x1)
    Signature Algorithm: sha256WithRSAEncryption
        Issuer: C=BD, ST=Dhaka, L=Dhaka, O=A2Z SERVERS LTD, OU=a2zservers.com, CN=a2zservers.com/name=BDEasyRSA/emailAddress=support@a2zservers.com
        Validity
            Not Before: Jun 26 05:45:53 2020 GMT
            Not After : Jun 24 05:45:53 2030 GMT
        Subject: C=BD, ST=Dhaka, L=Dhaka, O=A2Z Servers Ltd, OU=A2Z Servers, CN=a2zservers.com/name=BDEasyRSA/emailAddress=support@a2zservers.com
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (2048 bit)
                Modulus:
                    00:ea:39:b8:b8:ea:cc:27:d4:97:0f:08:74:52:f6:
                    25:19:95:e7:39:2d:c9:d5:1b:3f:10:0e:b2:94:29:
                    c2:cc:ee:6c:a6:49:15:06:e5:24:35:41:47:26:41:
                    ae:25:f4:77:a8:59:93:84:de:f8:05:a8:93:5d:06:
                    21:09:7c:b6:0d:d2:a2:68:94:fd:0a:f6:71:cd:b1:
                    65:a0:02:5a:0c:0b:33:0a:5c:06:82:c4:1f:de:70:
                    cd:66:c6:82:27:e1:e4:3c:e4:e4:8d:e7:c8:7c:d6:
                    68:2f:1c:d8:9c:52:02:a2:e2:0d:03:91:3b:a5:25:
                    3f:dd:e5:07:fb:cc:90:0d:0a:ae:9d:de:97:1a:0e:
                    5f:eb:c2:e8:8c:2b:2e:31:d6:f6:78:27:11:5d:19:
                    40:7a:cf:2d:3d:84:fc:e6:a4:74:50:ff:c0:da:05:
                    a1:10:ec:bc:97:5f:5e:04:ac:b1:a8:ac:97:e8:9e:
                    5d:51:e7:67:6f:b7:52:94:08:77:2f:ed:9d:69:f0:
                    a0:10:8d:b6:5e:f1:56:37:5d:38:58:df:6e:8d:21:
                    76:18:d1:de:cb:96:70:07:04:0b:a3:ca:bb:c2:b4:
                    51:50:44:7c:34:c9:95:9a:2c:01:62:aa:7a:80:01:
                    e7:69:22:c8:6f:f4:aa:6f:76:2b:44:9d:91:71:bc:
                    e0:39
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Basic Constraints: 
                CA:FALSE
            Netscape Cert Type: 
                SSL Server
            Netscape Comment: 
                Easy-RSA Generated Server Certificate
            X509v3 Subject Key Identifier: 
                E4:75:2E:ED:FD:F3:AB:7F:31:FB:B0:51:03:71:DE:FA:23:E5:2B:3A
            X509v3 Authority Key Identifier: 
                keyid:ED:8C:C8:07:27:B2:3D:8F:0D:16:31:B4:64:64:1B:DD:C8:F4:B3:F4
                DirName:/C=BD/ST=Dhaka/L=Dhaka/O=A2Z SERVERS LTD/OU=a2zservers.com/CN=a2zservers.com/name=BDEasyRSA/emailAddress=support@a2zservers.com
                serial:F5:5A:C5:96:7D:72:BC:53

            X509v3 Extended Key Usage: 
                TLS Web Server Authentication
            X509v3 Key Usage: 
                Digital Signature, Key Encipherment
    Signature Algorithm: sha256WithRSAEncryption
         81:56:cf:3e:d4:5b:6a:c8:2f:37:7c:31:ba:ae:2e:0c:20:4a:
         8a:bd:b7:35:cc:bc:47:c0:2d:b8:8c:8d:7a:9a:f2:ab:28:3d:
         02:7a:d6:06:b8:77:71:b5:a2:40:a2:6f:1a:34:02:40:a1:d5:
         e6:19:08:e7:08:fd:38:0b:fa:fc:b7:c7:22:9a:f3:f7:88:56:
         a4:69:a2:df:67:4a:80:90:d8:86:b3:db:43:3b:cb:37:86:f4:
         d9:31:7e:23:5d:9f:a3:82:14:df:eb:ae:7e:8d:76:a2:c8:29:
         ae:2e:f3:e9:db:1d:33:34:28:bb:78:a8:97:af:46:bf:a1:1d:
         ab:4f:2b:cf:bb:6c:64:24:13:a0:6d:4b:44:9d:05:92:fe:03:
         f7:29:be:f5:f6:fd:62:cc:11:e9:e4:f8:6c:88:43:0a:04:fd:
         0e:82:a2:bb:98:87:77:55:27:ae:12:30:3b:0a:37:52:fd:79:
         e1:00:00:7f:7f:51:1b:2f:b3:5b:f3:7d:0a:78:55:22:3b:cb:
         9a:ea:f6:f7:4e:f1:66:0c:b1:3e:5d:1e:45:3b:c5:03:3b:ae:
         8a:bc:4f:8e:40:da:a3:b4:54:f6:f7:ef:04:fe:95:38:ca:de:
         72:10:8a:f9:dd:a2:78:f0:a0:ae:48:84:f9:de:69:4d:05:66:
         fb:d2:bc:fd
-----BEGIN CERTIFICATE-----
MIIFaTCCBFGgAwIBAgIBATANBgkqhkiG9w0BAQsFADCBtDELMAkGA1UEBhMCQkQx
DjAMBgNVBAgTBURoYWthMQ4wDAYDVQQHEwVEaGFrYTEYMBYGA1UEChMPQTJaIFNF
UlZFUlMgTFREMRcwFQYDVQQLEw5hMnpzZXJ2ZXJzLmNvbTEXMBUGA1UEAxMOYTJ6
c2VydmVycy5jb20xEjAQBgNVBCkTCUJERWFzeVJTQTElMCMGCSqGSIb3DQEJARYW
c3VwcG9ydEBhMnpzZXJ2ZXJzLmNvbTAeFw0yMDA2MjYwNTQ1NTNaFw0zMDA2MjQw
NTQ1NTNaMIGxMQswCQYDVQQGEwJCRDEOMAwGA1UECBMFRGhha2ExDjAMBgNVBAcT
BURoYWthMRgwFgYDVQQKEw9BMlogU2VydmVycyBMdGQxFDASBgNVBAsTC0EyWiBT
ZXJ2ZXJzMRcwFQYDVQQDEw5hMnpzZXJ2ZXJzLmNvbTESMBAGA1UEKRMJQkRFYXN5
UlNBMSUwIwYJKoZIhvcNAQkBFhZzdXBwb3J0QGEyenNlcnZlcnMuY29tMIIBIjAN
BgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6jm4uOrMJ9SXDwh0UvYlGZXnOS3J
1Rs/EA6ylCnCzO5spkkVBuUkNUFHJkGuJfR3qFmThN74BaiTXQYhCXy2DdKiaJT9
CvZxzbFloAJaDAszClwGgsQf3nDNZsaCJ+HkPOTkjefIfNZoLxzYnFICouINA5E7
pSU/3eUH+8yQDQqund6XGg5f68LojCsuMdb2eCcRXRlAes8tPYT85qR0UP/A2gWh
EOy8l19eBKyxqKyX6J5dUednb7dSlAh3L+2dafCgEI22XvFWN104WN9ujSF2GNHe
y5ZwBwQLo8q7wrRRUER8NMmVmiwBYqp6gAHnaSLIb/Sqb3YrRJ2RcbzgOQIDAQAB
o4IBhTCCAYEwCQYDVR0TBAIwADARBglghkgBhvhCAQEEBAMCBkAwNAYJYIZIAYb4
QgENBCcWJUVhc3ktUlNBIEdlbmVyYXRlZCBTZXJ2ZXIgQ2VydGlmaWNhdGUwHQYD
VR0OBBYEFOR1Lu3986t/MfuwUQNx3voj5Ss6MIHpBgNVHSMEgeEwgd6AFO2MyAcn
sj2PDRYxtGRkG93I9LP0oYG6pIG3MIG0MQswCQYDVQQGEwJCRDEOMAwGA1UECBMF
RGhha2ExDjAMBgNVBAcTBURoYWthMRgwFgYDVQQKEw9BMlogU0VSVkVSUyBMVEQx
FzAVBgNVBAsTDmEyenNlcnZlcnMuY29tMRcwFQYDVQQDEw5hMnpzZXJ2ZXJzLmNv
bTESMBAGA1UEKRMJQkRFYXN5UlNBMSUwIwYJKoZIhvcNAQkBFhZzdXBwb3J0QGEy
enNlcnZlcnMuY29tggkA9VrFln1yvFMwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYD
VR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4IBAQCBVs8+1FtqyC83fDG6ri4MIEqK
vbc1zLxHwC24jI16mvKrKD0CetYGuHdxtaJAom8aNAJAodXmGQjnCP04C/r8t8ci
mvP3iFakaaLfZ0qAkNiGs9tDO8s3hvTZMX4jXZ+jghTf665+jXaiyCmuLvPp2x0z
NCi7eKiXr0a/oR2rTyvPu2xkJBOgbUtEnQWS/gP3Kb719v1izBHp5PhsiEMKBP0O
gqK7mId3VSeuEjA7CjdS/XnhAAB/f1EbL7Nb830KeFUiO8ua6vb3TvFmDLE+XR5F
O8UDO66KvE+OQNqjtFT29+8E/pU4yt5yEIr53aJ48KCuSIT53mlNBWb70rz9
-----END CERTIFICATE-----
EOF

cat << EOF > /etc/openvpn/server/server.key
-----BEGIN PRIVATE KEY-----
MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDqObi46swn1JcP
CHRS9iUZlec5LcnVGz8QDrKUKcLM7mymSRUG5SQ1QUcmQa4l9HeoWZOE3vgFqJNd
BiEJfLYN0qJolP0K9nHNsWWgAloMCzMKXAaCxB/ecM1mxoIn4eQ85OSN58h81mgv
HNicUgKi4g0DkTulJT/d5Qf7zJANCq6d3pcaDl/rwuiMKy4x1vZ4JxFdGUB6zy09
hPzmpHRQ/8DaBaEQ7LyXX14ErLGorJfonl1R52dvt1KUCHcv7Z1p8KAQjbZe8VY3
XThY326NIXYY0d7LlnAHBAujyrvCtFFQRHw0yZWaLAFiqnqAAedpIshv9KpvditE
nZFxvOA5AgMBAAECggEBAMltalZcVcXLJT1gX+kYlT8zku2xWulRzSHaAek5ILVs
NTOrldGgLUs/IBjeUw2A94Znwl16AoGbP1+4baDjBw1MHy8hMZvD5IqoDGVWoGnL
F9HI4jCCyYVaLMo93KC/urBDh+ohcmEpYd9iR0XnoSzCib6Pn2OebRY+aGc6vIb5
C4gFjTZ8K+zSlTpd5Jx/B7wN4/IDuQxZIDkhNfqUj6OBnMIW/KvIUKGKmV0r4oXL
dacqoj5jbcRLl+SPqvMDcDqa2c37qWgctfalc8WQgooPBDkgMy38bZYsaTsa8k11
APdxIAYJaI8Yjy6fSZbuIp2SXfSLFhL+ofUSA1Xp+6ECgYEA+OChC1xj5rHvfUdQ
TyWSEywrD3HkYc12MEUWLF20aXF8lSYzuWRuOaz8DM45tMq0WkTFvQ0wd+xpEQfC
/9ZwQ0B/gb2P4T8iJFbjKDzgCleNfrAO6jz2h3qEKee6lC+0CX+37L4HFuPVqyDQ
OXfQZbIgbCUUCHDNi8d7rHclfPsCgYEA8O2/Gk/rXKjq2PyZ52UP7KhwSd48RNKM
NChIhMDZnKj//W1z8OQa0RHfXIPJ33ZOmaKunPT//foD48uuz9HrqLuwCRlfCfqJ
CQSUwp+YAoWDn0oSg/2jdAm16ziS6O0MpH4EL9zmHMeOaf4NmTIXlz8SXpYzeJ1c
ZmvtM+er6VsCgYEAioh/HFPRSBjDtnh7u5KuPP3Y+j/rYIV9xGCwdwGx6v/A2UTq
hcfhkzk3E+m3NWuf+J9PcmxlDlwKH/CyGrbCxqygTRe3fyolVxUGXN+F1jvmBx75
LmnA0Kjh6HGU6eejz6XIO3+LcrJfvWIGhfarifAdHBWHkSs5PxVLQjUQKQECgYEA
5IG5dO1D37heNbsvBWa2+dCv33+mTegcDgP+89otCwbG9Mhw5JKUVKLM5GQifY0p
81F2p2s/uNT+B3nRrU3+YyTQS3EC0OYMPr9XkFfpxsp3EgchFIrmElJ7dkNMIxth
mEnlErhCkB09F45bu2blNRAfDhMLcmRdlM7cRRR/2m0CgYBkOWtF+/+Wm5YJRpWo
K3lKVbcq9S24X3KcDUXg5s/Ijc8nzK1/MrMxJs4N5YPoD9UQhK+qVQYOhrgl5MFH
zP8bbWF17rlhP6BiqSnlF/DzSrgZAfySDkPIe/VkvrpYLqORuSzYP6jXRfz7Lpp8
7lVnzaO20Qkcj4RYWor59BE1LQ==
-----END PRIVATE KEY-----
EOF

cat << EOF > /etc/openvpn/server/dh.pem
-----BEGIN DH PARAMETERS-----
MIIBCAKCAQEAv4qM2EbvKNExWO4yYQCJ5d7/coGMSI2TVMm8LWNXlArbggOGEEMS
WiYaUDVThjgz2ct+HUPuLsHWN2k0OLe/p2rbS0AlQ08ZkOoL7U5aqlUb5YK+iHli
i3VugnELm1r8OJW2FIK3N/SeE6GaHtp71ZfAjkxNdwvxomjD0V/j7hNoV8cYWur8
cyYWBoMfQMkbTy2snGfBqQTcP3tnbBcPRTumTSFDyQ9c21syKggfxnT1r3CEQNlJ
mqSURBYIq+kv8MNjs7C8mQ9IpPZVkeBMNVGxPoQ9QasiotHdeWq4hGMxO3/3HGII
UBBXbEFgkbLoIxA9WUheh+nBVRGDoGgrewIBAg==
-----END DH PARAMETERS-----
EOF

cat << "EOM" > /etc/openvpn/server/connect.sh
#!/bin/bash

HOST='184.168.111.40'
USER='vui-phil-user'
PASS='soldier062185'
DB='vui-philippines101'

connection_status="Online"
username="$common_name"
mysql -u $USER -p$PASS -D $DB -h $HOST -sN -e "UPDATE vgax_users SET connection_status='$connection_status', connection_start='yes' WHERE username='$username'"
EOM

cat << "EOM" > /etc/openvpn/server/disconnect.sh
#!/bin/bash

HOST='184.168.111.40'
USER='vui-phil-user'
PASS='soldier062185'
DB='vui-philippines101'


connection_status="offline"
username="$common_name"
mysql -u $USER -p$PASS -D $DB -h $HOST -sN -e "UPDATE vgax_users SET connection_status='$connection_status' WHERE username='$username'"
EOM

chmod +x /etc/openvpn/server/auth_vpn
chmod +x /etc/openvpn/server/connect.sh
chmod +x /etc/openvpn/server/disconnect.sh
touch /var/www/html/udpstatus.txt
touch /var/www/html/tcpstatus.txt
chmod 755 /var/www/html/*

if [[ $(lsb_release -rs) == "18"* ]] || [[ $(lsb_release -rs) == "20"* ]]; then
	service openvpn restart
else
	screen -dmS openvpntcp openvpn /etc/openvpn/server/server.conf
	systemctl restart --now openvpn-server@server.service
fi

}

set_iptables () {
Myip=`host myip.opendns.com resolver1.opendns.com | grep "myip.opendns.com has" | awk '{print $4}'`
Myip
echo "net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.default.accept_source_route = 0
kernel.sysrq = 0
kernel.core_uses_pid = 1
net.ipv4.tcp_syncookies = 1
kernel.msgmnb = 65536
kernel.msgmax = 65536
kernel.shmmax = 68719476736
kernel.shmall = 4294967296
net.ipv4.ip_forward = 1
fs.file-max = 65535
net.core.rmem_default = 262144
net.core.rmem_max = 262144
net.core.wmem_default = 262144
net.core.wmem_max = 262144
net.ipv4.tcp_rmem = 4096 87380 8388608
net.ipv4.tcp_wmem = 4096 65536 8388608
net.ipv4.tcp_mem = 4096 4096 4096
net.ipv4.tcp_low_latency = 1
net.core.netdev_max_backlog = 4000
net.ipv4.ip_local_port_range = 1024 65000
net.ipv4.tcp_max_syn_backlog = 16384" > /etc/sysctl.conf
sysctl -p
iptables -F; iptables -X; iptables -Z
iptables -t nat -A POSTROUTING -s 10.8.0.0/16 -o eth0 -j MASQUERADE
iptables -t nat -A POSTROUTING -s 10.8.0.0/16 -j SNAT --to-source `curl -s http://ipv4.icanhazip.com`
iptables -t nat -A POSTROUTING -s 10.9.0.0/16 -o eth0 -j MASQUERADE
iptables -t nat -A POSTROUTING -s 10.9.0.0/16 -j SNAT --to-source `curl -s http://ipv4.icanhazip.com`


sudo DEBIAN_FRONTEND=noninteractive apt install debconf-utils -y 

echo iptables-persistent iptables-persistent/autosave_v4 boolean true | sudo debconf-set-selections
echo iptables-persistent iptables-persistent/autosave_v6 boolean true | sudo debconf-set-selections
sudo DEBIAN_FRONTEND=noninteractive apt-get install iptables-persistent -y

iptables-save > /etc/iptables/rules.v4 
ip6tables-save > /etc/iptables/rules.v6

}

if [[ $(lsb_release -rs) == "18"* ]]; then

	   clear
       echo "Install Ubuntu 18"	 
	   sleep 3
	   system_update
	   install_openvpn
	   install_stunnel
	   install_socksproxy
	   install_websocket
	   set_iptables
	   systemctl enable stunnel4
	   systemctl enable openvpn	   
	   install_cron21	   
	   reboot
      
elif [[ $(lsb_release -rs) == "20"* ]]; then

	   clear
       echo "Install Ubuntu 20"	 
	   sleep 3
	   system_update
	   install_openvpn
	   install_stunnel
	   install_socksproxy
	   install_websocket
	   set_iptables
	   systemctl enable stunnel4
	   systemctl enable openvpn	   
	   install_cron21	   
	   reboot

elif [[ $(lsb_release -rs) == "21"* ]]; then

	   clear
       echo "Install Ubuntu21"	 
	   sleep 3
	   system_update
	   install_openvpn
	   install_stunnel
	   install_socksproxy
	   install_websocket
	   set_iptables
	   systemctl enable stunnel4
	   systemctl enable openvpn	   
	   install_cron21	   
	   reboot
	   
elif [[ $(lsb_release -rs) == "22"* ]]; then

	   clear
       echo "Install Ubuntu22"	 
	   sleep 3
	   system_update
	   install_openvpn
	   install_stunnel
	   install_socksproxy
	   install_websocket
	   set_iptables
	   systemctl enable stunnel4
	   systemctl enable openvpn
	   install_cron21
	   reboot
	   
else 
		clear
		echo "Version Not Supported"
fi
